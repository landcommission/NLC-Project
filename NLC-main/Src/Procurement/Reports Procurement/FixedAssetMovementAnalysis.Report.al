#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 50091 "Fixed Asset Movement Analysis"
{
    Caption = 'Fixed Asset - Acquisition List';
    WordLayout = './Layouts/FixedAssetMovementAnalysis.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Fixed Asset"; "Fixed Asset")
        {
            RequestFilterFields = "Asset Movement Status";
            column(ReportForNavId_3794; 3794) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Table5600; ReportForNavWriteDataItem('Table5600', "Fixed Asset")) { }
            column(CompanyName; COMPANYNAME)
            {
            }
            column(DeprBookText; DeprBookText)
            {
            }
            column(FixAssetTableCaptFaFilter; TableCaption + ': ' + FAFilter)
            {
            }
            column(No_FixedAsset; "No.")
            {
                IncludeCaption = true;
            }
            column(Desc_FixedAsset; Description)
            {
                IncludeCaption = true;
            }
            column(LocCode_FixedAsset; "FA Location Code")
            {
                IncludeCaption = true;
            }
            column(SerialNo_FixedAsset; "Serial No.")
            {
                IncludeCaption = true;
            }
            column(FaDeprBookAcquDate; Format(FADeprBook."Acquisition Date"))
            {
            }
            column(FixedAssetAcqListCptn; FixedAssetAcqListCptnLbl)
            {
            }
            column(CurrReportPageNoCaption; CurrReportPageNoCaptionLbl)
            {
            }
            column(FADeprBkAcquisitionDtCptn; FADeprBkAcquisitionDtCptnLbl)
            {
            }

            trigger OnAfterGetRecord();
            begin
                /*{
				CLEAR(FADeprBook);
				PrintFA := FALSE;
				IF NOT FADeprBook.GET("No.",DeprBookCode) THEN BEGIN
				  IF FAWithoutAcqDate THEN
					PrintFA := TRUE;
				END ELSE BEGIN
				  IF FADeprBook."Acquisition Date" = 0D THEN BEGIN
					IF FAWithoutAcqDate THEN
					  PrintFA := TRUE;
				  END ELSE
					PrintFA := (FADeprBook."Acquisition Date" >= StartingDate) AND
					  (FADeprBook."Acquisition Date" <= EndingDate);
				END;
				IF NOT PrintFA THEN
				  CurrReport.SKIP;
				   }*/

            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
        }

        trigger OnOpenPage()
        begin
            if DeprBookCode = '' then begin
                FASetup.Get;
                DeprBookCode := FASetup."Default Depr. Book";
            end;
        end;

    }

    trigger OnPreReport()
    begin
        /*{
		FAGenReport.AppendFAPostingFilter("Fixed Asset",StartingDate,EndingDate);
		FAFilter := "Fixed Asset".GETFILTERS;
		DeprBookText := STRSUBSTNO('%1%2 %3',DeprBook.TABLECAPTION,':',DeprBookCode);
		ValidateDates(StartingDate,EndingDate);
		FAGenReport.ValidateDates(StartingDate,EndingDate);
		}*/

        ;
        ReportsForNavPre;

    end;

    var
        FASetup: Record "FA Setup";
        DeprBook: Record 5611;
        FADeprBook: Record "FA Depreciation Book";
        FAGenReport: Codeunit 5626;
        DeprBookCode: Code[10];
        DeprBookText: Text[50];
        FAFilter: Text;
        StartingDate: Date;
        EndingDate: Date;
        FAWithoutAcqDate: Boolean;
        PrintFA: Boolean;
        Text001: label 'You must specify a Starting Date.';
        Text002: label 'You must specify an Ending Date.';
        Text003: label 'You must specify an Ending Date that is later than the Starting Date.';
        FixedAssetAcqListCptnLbl: label 'Fixed Asset-Movement Analysis';
        CurrReportPageNoCaptionLbl: label 'Page';
        FADeprBkAcquisitionDtCptnLbl: label 'Acquisition Date';

    procedure ValidateDates(StartingDate: Date; EndingDate: Date)
    begin
        /*{
		IF StartingDate = 0D THEN
		  ERROR(Text001);
		IF EndingDate = 0D THEN
		  ERROR(Text002);
		IF StartingDate > EndingDate THEN
		  ERROR(Text003);
		  }*/

    end;

    trigger OnInitReport();
    begin

    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var

        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;



    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;



    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin

            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'Table5600':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$Table5600$CurrentKey$Text', "Fixed Asset".CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
        end;

        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
