#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 50088 "Consumption Trend Analysis"
{
    WordLayout = './Layouts/ConsumptionTrendAnalysis.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Item; Item)
        {
            RequestFilterFields = "Date Filter";
            column(ReportForNavId_40; 40) { } // Autogenerated by ForNav - Do not delete
            column(CompanyInfoName; CompanyInfo.Name)
            {
            }
            column(No_Item; Item."No.")
            {
            }
            column(BaseUnitofMeasure_Item; Item."Base Unit of Measure")
            {
            }
            column(Description_Item; Item.Description)
            {
            }
            column(CompanyInfoPicture; CompanyInfo.Picture)
            {
            }
            column(UnitPrice; UnitPrice)
            {
            }
            column(TotalCost; TotalCost)
            {
            }
            column(QuantityConsumed; QuantityConsumed)
            {
            }
            column(TrendDate; TrendDate)
            {
            }
            column(Inventory_Item; Item.Inventory)
            {
            }
            trigger OnPreDataItem();
            begin
                //setrange
                Item.SetFilter(Item."Date Filter", '%1..%2', FromDate, ToDate);
                TrendDate := Format(FromDate) + '..' + Format(ToDate);
            end;

            trigger OnAfterGetRecord();
            begin
                /*
				//calculate unit price
				UnitPrice:=0;
				TotalCost:=0;
				StoreRequistionLines.RESET;
				StoreRequistionLines.SETRANGE(StoreRequistionLines."No.","No.");
				IF StoreRequistionLines.FIND('-')THEN BEGIN
				ItemLedgerEntry.RESET;
				ItemLedgerEntry.SETRANGE(ItemLedgerEntry."Document No.",StoreRequistionLines."Requistion No");
				IF ItemLedgerEntry.FIND('-')THEN BEGIN
				UnitPrice:=UnitPrice+StoreRequistionLines."Unit Cost";
				QuantityConsumed:=QuantityConsumed+StoreRequistionLines.Quantity;
				TotalCost:=TotalCost+StoreRequistionLines."Line Amount";
				END;
				END;
				*/
                UnitPrice := 0;
                QuantityConsumed := 0;
                TotalCost := 0;
                StoreRequistionLines.Reset;
                StoreRequistionLines.SetRange(StoreRequistionLines."No.", "No.");
                //StoreRequistionLines.SETRANGE(StoreRequistionLines."Status Tracker",StoreRequistionLines."Status Tracker"::Posted);
                if StoreRequistionLines.Find('-') then begin
                    repeat
                        UnitPrice := UnitPrice + StoreRequistionLines."Unit Cost";
                        QuantityConsumed := QuantityConsumed + StoreRequistionLines.Quantity;
                        TotalCost := TotalCost + StoreRequistionLines."Line Amount";
                    until StoreRequistionLines.Next = 0;
                end;
                UnitPrice := Item."Unit Cost";
                TotalCost := Item."Unit Cost" * QuantityConsumed;
                if QuantityConsumed = 0 then
                    CurrReport.Skip;

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                field(FromDate; FromDate)
                {
                    ApplicationArea = Basic;
                    Caption = 'From Date';
                }
                field(ToDate; ToDate)
                {
                    ApplicationArea = Basic;
                    Caption = 'To Date';
                }

            }
        }

    }

    trigger OnPreReport()
    begin
        CompanyInfo.Get;
        CompanyInfo.CalcFields(Picture);
        TrendDate := Item.GetFilters;
        TrendDateFilter := Item.GetFilter("Date Filter");
        ;
        ReportsForNavPre;

    end;

    var
        CompanyInfo: Record "Company Information";
        StoreRequistionHeader: Record "Store Requistion Headers";
        StoreRequistionLines: Record "Store Requistion Line";
        UnitPrice: Decimal;
        TotalCost: Decimal;
        QuantityConsumed: Decimal;
        ItemLedgerEntry: Record "Item Ledger Entry";
        TrendDate: Text;
        TrendDateFilter: Text;
        FromDate: Date;
        ToDate: Date;

    trigger OnInitReport();
    begin

    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var

        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;



    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;




    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
